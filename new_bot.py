import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from configg import BOT_TOKEN, GROUP_ID
from temp_word import abusive_language
import re
from urllib.parse import urlparse

TOKEN = BOT_TOKEN

SPAM_PATTERNS = [
    r'\d{3,}—Ä|\d{3,}—Ä—É–±|\d{3,}p|\d{3,}‚ÇΩ',
    r'–∑–∞—Ä–∞–±–æ—Ç–æ–∫|–∑–∞—Ä–∞–±[–æ0]—Ç–∫[–∞a]|–∑[–∞a]—Ä–ø–ª–∞—Ç[–∞a]',
    r'–ø–æ–¥—Ä–∞–±–æ—Ç–∫[–∞a]|—Ä–∞–±–æ—Ç–∞|–≤–∞–∫–∞–Ω—Å–∏—è',
    r'[–∑3]–∞\s*\d+\s*–º–∏–Ω—É—Ç',
    r'http[s]?://\S+',
    r'[\w-]+\.(com|ru|net|org|—Ä—Ñ|su|xyz)',
    r'\[id\d+\|.+\]',
    r'@\w{5,}|@[\w-]+\.[\w-]+',
    r'[8|+7][\s-]?\(?\d{3}\)?[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2}',
]

OBSCENE_PATTERNS = abusive_language

class SmartModerator:
    def __init__(self):
        self.vk_session = vk_api.VkApi(token=TOKEN)
        self.vk = self.vk_session.get_api()
        self.longpoll = VkBotLongPoll(self.vk_session, GROUP_ID)

        self.spam_regex = [re.compile(p, re.IGNORECASE) for p in SPAM_PATTERNS]
        self.obscene_regex = [re.compile(p, re.IGNORECASE) for p in OBSCENE_PATTERNS]

        self.user_warnings = {}  # {user_id: count}
        self.deleted_messages = {}  # {peer_id: {...}}

    def delete_message(self, msg_id, peer_id, user_id, text, reason):
        try:
            self.vk.messages.delete(
                peer_id=peer_id,
                delete_for_all=1,
                cmids=msg_id,
                group_id=GROUP_ID
            )
        except:
            return  # —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.deleted_messages[peer_id] = {
            'msg_id': msg_id,
            'text': text,
            'user_id': user_id,
            'reason': reason
        }

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_warnings[user_id] = self.user_warnings.get(user_id, 0) + 1
        warning = self.user_warnings[user_id]

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏
        self.vk.messages.send(
            peer_id=peer_id,
            message=f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warning}/3",
            random_id=0
        )

        # –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö
        if warning >= 3:
            chat_id = peer_id - 2000000000
            try:
                self.vk.messages.removeChatUser(
                    chat_id=chat_id,
                    member_id=user_id
                )
                self.vk.messages.send(
                    peer_id=peer_id,
                    message=f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{user_id}|–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω] –∑–∞ 3 –Ω–∞—Ä—É—à–µ–Ω–∏—è.",
                    random_id=0
                )
            except:
                self.vk.messages.send(
                    peer_id=peer_id,
                    message=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id{user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]. –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    random_id=0
                )

    def restore_message(self, peer_id, admin_id):
        data = self.deleted_messages.get(peer_id)
        if not data:
            return

        user_id = data['user_id']
        text = data['text']

        # –ú–∏–Ω—É—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ –æ—Ç–º–µ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
        self.user_warnings[user_id] = max(0, self.user_warnings.get(user_id, 1) - 1)

        try:
            self.vk.messages.send(
                peer_id=peer_id,
                message=f"‚Ü©Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä [id{admin_id}|–æ—Ç–º–µ–Ω–∏–ª] –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–¥–∞–ª–µ–Ω–∏–µ:\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç [id{user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]:\n{text}",
                random_id=0
            )
            del self.deleted_messages[peer_id]
        except:
            pass

    def is_spam(self, text):
        has_money = re.search(r'\d{3,}\s*(—Ä|—Ä—É–±|p|‚ÇΩ)', text, re.IGNORECASE)
        keywords = re.search(r'–∑–∞—Ä–∞–±–æ—Ç–æ–∫|–∑–∞—Ä–∞–±[–æ0]—Ç–∫[–∞a]|–∑[–∞a]—Ä–ø–ª–∞—Ç[–∞a]|–ø–æ–¥—Ä–∞–±–æ—Ç–∫[–∞a]|—Ä–∞–±–æ—Ç–∞|–≤–∞–∫–∞–Ω—Å–∏—è', text, re.IGNORECASE)

        urls = re.findall(r'http[s]?://[^\s]+', text)
        suspicious_domains = any(
            urlparse(url).netloc.endswith(('.com', '.ru', '.net'))
            for url in urls
        )

        return bool(has_money or keywords or suspicious_domains)

    def check_message(self, text):
        if any(p.search(text) for p in self.obscene_regex):
            return "–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞"
        if self.is_spam(text):
            return "—Å–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞"
        if re.search(r'(.+?)(\1{3,})', text):
            return "—Ñ–ª—É–¥"
        return None

    def is_admin(self, peer_id, user_id):
        try:
            members = self.vk.messages.getConversationMembers(peer_id=peer_id)
            for m in members['items']:
                if m['member_id'] == user_id:
                    return m.get('is_admin', False) or m.get('is_owner', False)
        except:
            return False
        return False

    def run(self):
        for event in self.longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW and event.from_chat:
                msg = event.object.message
                text = msg.get('text', '').strip()
                msg_id = msg['conversation_message_id']
                peer_id = msg['peer_id']
                user_id = msg['from_id']

                if not text:
                    continue

                if text.lower() == "/–æ—Ç–º–µ–Ω–∞":
                    if self.is_admin(peer_id, user_id):
                        self.restore_message(peer_id, admin_id=user_id)
                    else:
                        self.vk.messages.send(
                            peer_id=peer_id,
                            message="‚õî –ö–æ–º–∞–Ω–¥—É /–æ—Ç–º–µ–Ω–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞.",
                            random_id=0
                        )
                    continue

                reason = self.check_message(text)
                if reason:
                    self.delete_message(msg_id, peer_id, user_id, text, reason)

if __name__ == "__main__":
    bot = SmartModerator()
    bot.run()
